// Your custom utility classes will be placed here, you can add your own.

// Z-INDEX
@for $i from 0 through 100 {
    .z#{$i} {
        z-index: #{$i} !important;
    }
}
// Font Family
$font-families: (
    'archivo': 'Archivo Narrow', 
    'open': 'Open Sans',
);
@each $name, $val in $font-families {
    .ff-#{$name} {
        font-family: $val;
    }
}

// Font Weight
$font-weights: (100,300,400,500,600,700,900);
@each $i in $font-weights {
    .fw#{$i} {
        font-weight: $i;
    }
}

// FONT SIZES default from 0 to 100

@for $i from 0 through 100 {
    .fs#{$i} {font-size: #{$i}px!important; }
    // RESPONSIVE PATTERN .fs(value)-(breakpoint)
    // fontsizeclass(value/number)-(breakpoint)
    @each $breakpoint, $value in $min-breakpoints {
        @media (min-width : #{$value}) {
            .fs#{$i}-#{$breakpoint} { font-size: #{$i}px !important; }
        }
    }
}

// END FONT SIZES
$positions: (absolute, relative, static,sticky);
@each $name in $positions {
    .ps-#{$name} {position: $name;}
}
// Flex direction
$flex-directions: (column, column-reverse,row,row-reverse,inherit,initial,unset);
@each $name in $flex-directions {
    .fd-#{$name} { flex-direction: $name; }
}
// Displays
$display: (block,flex,inline-block,inline-flex,table,grid,none,list-item,unset);
@each $name in $display {
    .d-#{$name} { display: $name!important; }
}

$text-transforms: (uppercase, lowercase,capitalize);
@each $name in $text-transforms {

    // Global
    .text-#{$name} {text-transform: $name;}
}
@for $y from 0 through 200 {
    $sides: (top, bottom, left, right);
    .mx#{$y} {
        margin-left: #{$y}px!important;
        margin-right: #{$y}px!important;
    }
    .my#{$y} {
        margin-top: #{$y}px!important;
        margin-bottom: #{$y}px!important;
    }
    .m#{$y} { margin: #{$y}px!important;}
    .p#{$y} { padding: #{$y}px!important;}
    .px#{$y} {
        padding-left: #{$y}px!important;
        padding-right: #{$y}px!important;
    }
    .py#{$y} {
        padding-top: #{$y}px!important;
        padding-bottom: #{$y}px!important;
    }

    @each $side in $sides {
        .m#{str-slice($side, 0, 1)}#{$y} { margin-#{$side}: #{$y}px!important; }
        .p#{str-slice($side, 0, 1)}#{$y} { padding-#{$side}: #{$y}px!important; }
    }
}

@for $y from 1 through 100 {
    .rn-#{$y} {
        margin-left: -#{$y}px;
        margin-right: -#{$y}px;
        display: flex;
        flex-wrap: wrap;
    }
}
@each $breakpoint, $value in $min-breakpoints {
    @media (min-width : #{$value}) {
        // Text Transforms
        @each $name in $text-transforms {
            .text-#{$name}-#{$breakpoint} {text-transform: $name;}
        }
        // Displays
        @each $name in $display {
            .d-#{$name}-#{$breakpoint} { display: $name!important; }
        }
        // Flex Directions
        @each $name in $flex-directions {
            .fd-#{$name}-#{$breakpoint} { flex-direction: $name; }
        }
        // Positions
        @each $name in $positions {
            .ps-#{$name}-#{$breakpoint} {position: $name;}
        }
	}

    @for $y from 0 through 200 {
      @media (min-width : #{$value}) {

        .rn-#{$y}-#{$breakpoint} {
            margin-left: -#{$y}px;
            margin-right: -#{$y}px;
            display: flex;
            flex-wrap: wrap;
        }
        $sides: (top, bottom, left, right);
        @each $side in $sides {
            .m#{str-slice($side, 0, 1)}#{$y}-#{$breakpoint} { margin-#{$side}: #{$y}px!important; }
            .p#{str-slice($side, 0, 1)}#{$y}-#{$breakpoint} { padding-#{$side}: #{$y}px!important; }
        }



        .m#{$y}-#{$breakpoint} { margin: #{$y}px!important;}
        .p#{$y}-#{$breakpoint} { padding: #{$y}px!important;}
        .mx#{$y}-#{$breakpoint} {
            margin-left: #{$y}px!important;
            margin-right: #{$y}px!important;
        }
        .my#{$y}-#{$breakpoint} {
            margin-top: #{$y}px!important;
            margin-bottom: #{$y}px!important;
        }
        .px#{$y}-#{$breakpoint} {
            padding-left: #{$y}px!important;
            padding-right: #{$y}px!important;
        }
        .py#{$y}-#{$breakpoint} {
            padding-top: #{$y}px!important;
            padding-bottom: #{$y}px!important;
        }
      }
    }
}




// Mixed
@for $i from 0 through 100 {
    .lh#{$i} {
        line-height: #{$i}px;
    }
    .lh-#{$i} {
        line-height: $i * 1%;
    }
    .ls#{$i} {
        letter-spacing: #{$i}px;
    }
    .mw-#{$i} {
        max-width: $i * 1%;
    }
    .br-#{$i} {
        border-radius: #{$i}px;
    }
}



// COLORS
$colors: (
    'blue': $blue,
    'black': $black,
    'grey': $grey,
    'darkgrey': $darkgrey,
    'dark': $dark,
    'white': $white,
    'lightgrey': $lightgrey,
    'lightergrey': $lightergrey,
    'orange': $orange,
);
@each $name, $val in $colors {
    .before-#{$name} {
        &::before {
            content: '';
            background-color: $val;
            display: inline-block;
            vertical-align: top; 
            height: 100%;
            width: 10px;
            position: absolute;
            left: 0;
            top: 0;
        }
    }  
    .tc-#{$name} {
        color: $val; 
    }
    .tch-#{$name} { 
        &:hover { 
            color: $val;
        } 
    }
    .bgc-#{$name} {
        background-color: $val;
    }
    .brd-#{$name} {
        border: 1px solid $val !important;
        &:hover {
            border: 1px solid transparent !important;
        }
    }
    .bgh-#{$name} {
        &:hover {
            background-color: $val;
        }
    }
}



.ft {
    position: absolute;
    &.f-center {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    &.ft-top-left {
        top: 0;
        left: 0;
    }
    &.ft-top-right {
        top: 0;
        right: 0;
    }
    &.ft-bottom-left {
        bottom: 0;
        left: 0;
    }
    &.ft-bottom-right {
        bottom: 0;
        right: 0;
    }
}






$overflows:(hidden,visible,scroll,auto);

@each $overflow in $overflows {
    .o-#{$overflow} {
        overflow: $overflow;
    }
    .ox-#{$overflow} {
        overflow-x: $overflow;
    }
}


$object-fit: (cover,fill,contain,scale-down,none);

@each $name in $object-fit {
    .of-#{$name} {
        object-fit: $name;
    }
}


@for $i from 1 through 4 {
    .column-#{$i} {
        column-count: #{$i};
    }
    @each $breakpoint, $value in $min-breakpoints {
        @media (min-width : #{$value}) {
            .column-#{$i}-#{$breakpoint} {
                column-count: #{$i};
            }
        }
    }
}

@for $i from 1 through 50 {
    .gap-#{$i} {
        column-gap: #{$i}px;
    }
}


$sides: (top, bottom, left, right);
@each $side in $sides {
    .b#{str-slice($side, 0, 1)}-default {
        border-#{$side}: 1px solid #ccc;
    }
}


@each $breakpoint, $value in $min-breakpoints {
    @media (min-width : #{$value}) {
        .col-#{$breakpoint}-auto {
            max-width: unset;
        }
    }
}

$word-breaks:(normal,break-all,keep-all,break-word,initial,inherit);

@each $wb in $word-breaks {
    .wb-#{$wb} {
        word-break: $wb;
    }
}